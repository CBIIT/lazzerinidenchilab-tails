---
title: "nFISH - sgRNA Epigenetics - cellHTS2 Data prep"
author: "Benura Azeroglu/Gianluca Pegoraro"
date: today
date-format: long
format: 
  html:
      self-contained: true
      code-fold: true
      code-tools: true
      code-link: true
editor: source
---

## README

This script is used to generate the data formatted for CellHTS2 analysis. 

Screening plates were spotted in 3 different batches:

Batch 1 (08/02/2023): HT001451 - HT001459, Plates 1 to 3 of the Epi Library.

HT001451 - HT001453 were run as bio rep 1
HT001454 - HT001456 were run as bio rep 2
HT001457 - HT001459 were run as bio rep 3

Plates HT001453, HT001456, HT001459 (All plates 3 of the screen) were unusable because most of the cells from columns 17 to 24 in these plates were lost. We identified the issue with the Bluewasher program for cell fixation that caused this issue and corrected it. As a result, a new batch of plates 1 - 3 was spotted:

Batch 2 (09/07/2023): HT001488 - HT001496, Plates 1 to 3 of the Epi Library.

In addition, we also decided to screen an additional plate that was designed as an add-on to the Epi library (Plate 4) by K. Guin in the Misteli lab. 

Batch 3 (09/08/2023): HT001500 - HT001502, Plate 4 of the Epi Library.

HT001490 and HT001500 were run as bio rep 1
HT001493 and HT001501 were run as bio rep 2
HT001496 and HT001502 were run as bio rep 3

nFISH did not work for HT001493 and HT001501, and were not analyzed. To match the number of replicates, only plates HT001451, HT001452, HT001457, HT001458, HT001490, HT001500, HT001496, HT001502 were analyzed (4 plates per biological replicate, 2 biological replicates).

Finally, visual inspection of the results revealed that sgDDX39A (Pos) ans sgBLM (Pos2) positions on the plates were clearly swapped in plates HT001490 and HT001496 during plate spotting. G. Pegoraro decided to swap the well labels for these wells only for plates HT001490 and HT001496.

## Setup

Load packages.

```{r}
#| label: load-packages
#| message: false

library(tidyverse)
library(fs)
library(paint)
```

### User variables input and settings specification

```{r}
#| label: input-dirs
#| 
METADATA_DIR<- "hts2_metadata"

IN_DIR <- "hts2_input"

OUT_DIR <- "hts2_output"

WELL_DIR <- "columbus_output"

SYNTHEGO_DIR <- file.path("reformat_metadata", "Synthego")

RANDOMIZATION_DIR <- file.path("reformat_metadata",
                               "2020-01-17",
                               "E5XX-1710_Transfer_1579272110.csv")
CACHE_DIR <- "cache"

GLOB_W <- "*micronuclei*result.1.txt" # Pattern for Well level data files
```

Generate the `r IN_DIR` directory for the well level Columbus data to be used in the`cellHTS2` analysis. In addition, create an empty template for the `cellHTS2` description file in the `r METADATA_DIR` directory. **This file contains information about the experiment, and it must be filled in in a text editor before continuing with the analysis. Without this file cellHTS2 won't run**.

```{r}
#| label: make-dir

if(!dir_exists(IN_DIR)){
dir_create(IN_DIR)
}

if(!file_exists(file.path(METADATA_DIR,"Description.txt"))) { 
    templateDescriptionFile(filename = "Description.txt", path = METADATA_DIR)
}
```

Set the `ggplot2` theme.

```{r}
#| leabel: set-options
#| include: false

theme_set(theme_bw())

theme_update(axis.text.x = element_text(
angle = -90,
hjust = 0,
vjust = 0.5
),
  axis.text.y = element_text(hjust = 0)
)
```

## Metadata input and wrangling

Read the sgRNA layout information provided by Synthego for the Epigenetics Library. 3 sgRNA oligos per well. 3 plates.

```{r}
#| label: read-epi-gene-list

epi_gene_tbl <- 
  dir_ls(path = SYNTHEGO_DIR,
         glob = "*qc.csv") |>
  read_csv(
    id = "file_name",
    col_names = c("mother_well",
                  "gene_symbol",
                  "oligo_seq"),
    col_types = "ccc"
  ) |>
  mutate(synthego_barcode = file_name |> str_extract("set_[1-3]")) |>
  group_by(synthego_barcode, mother_well, gene_symbol) |>
  group_keys()

paint(epi_gene_tbl)
```

Read the sgRNA layout information provided by Synthego for the Guin Library. 3 sgRNA oligos per well. 1 plate.

```{r}
#| label: read-guin-gene-list

guin_gene_tbl <- read_csv(file.path(SYNTHEGO_DIR, "guin_library.csv")) %>%
  select(mother_well = item_position,
         gene_symbol = gene,
         oligo_seq = sequence) %>%
  mutate(synthego_barcode = "set_4") %>%
  group_by(synthego_barcode, mother_well, gene_symbol) %>%
  group_keys()

glimpse(guin_gene_tbl)
```

Concatenate Epigenetics gene table with Guin gene table.

```{r}
#| label: contatenate-gene-lists

gene_tbl <- bind_rows(epi_gene_tbl, guin_gene_tbl)

glimpse(gene_tbl)
```

Assign the mappings from Synthego plates to 384-well PP Labcyte mother plates for the Epigenetics Library. Plates were transferred with a 1 to 1 exact mapping from Synthego to Mother(e.g. A1 -\> A1, B1 -\> B1, etc.). Mother Plates to Daughter plates were randomized for the epigenetics library (Plates 1 - 3), but not for the Guin plate (Plate 4). Finally sgRNAs were transferred with a 1 to 1 exact mapping from Daughter to Imaging (e.g. A1 -\> A1, B1 -\> B1, etc.).

```{r}
#| label: set-plate-mappings

synthego_to_mother <- tibble(
  synthego_barcode = paste0("set_", 1:4),
  mother_barcode = c("HT000609",
                     "HT000610",
                     "HT000611",
                     "HT001005")
)

dest_to_daughter <-
  tibble(
    daughter_barcode = c(paste0("HT0006", 45:47), "HT001080"),
    dest_barcode = paste0("dest_plate_", 1:4),
    plate = 1:4
  )

daughter_to_imaging <- tibble(
  daughter_barcode = rep(c(paste0("HT0006", 45:47), "HT001080"), 3),
  imaging_barcode = paste0("HT001", c("451", "452", "490", "500", 
                                      "454", "455", "493", "501", 
                                      "457", "458", "496", "502")
                           )
  )

```

Create a dummy randomization table for plate 4.

```{r}
#| label: generate-dummy-rand

guin_daughter_tbl <-
  tibble(
    file_name = "Source_Files/guin_library.csv",
    source_barcode = "source_plate_4",
    mother_well = guin_gene_tbl |> pull(mother_well),
    dest_barcode = "dest_plate_4",
    imaging_well = mother_well,
    synthego_barcode = "set_4"
  )

glimpse(guin_daughter_tbl)
```

Bring everything together to generate the plate layout table.

```{r generate-layout}
layout_tbl <- read_csv(RANDOMIZATION_DIR,
                       skip = 10,
                       n_max = 826, 
                       show_col_types = FALSE) |>
  select(
    file_name = `Source Plate Name`,
    source_barcode = `Source Plate Barcode`,
    mother_well = `Source Well`,
    dest_barcode = `Destination Plate Barcode`,
    imaging_well = `Destination Well`
  ) |>
  mutate(synthego_barcode = file_name |> str_extract("set_[1-3]")) |>
  bind_rows(guin_daughter_tbl) |>
  left_join(synthego_to_mother, by = "synthego_barcode") |>
  left_join(dest_to_daughter, by = "dest_barcode") |>
  left_join(gene_tbl, by = c("synthego_barcode", "mother_well")) |>
  right_join(daughter_to_imaging, by = c("daughter_barcode")) |>
  select(
    file_name,
    synthego_barcode,
    mother_barcode,
    source_barcode,
    mother_well,
    daughter_barcode,
    dest_barcode,
    plate,
    imaging_barcode,
    imaging_well,
    gene_symbol
  )

write_tsv(layout_tbl, file = file.path(CACHE_DIR, "plates_layout.txt"))

paint(layout_tbl)
```

## Columbus results input and wrangling

Read the cell-level HiTIPS data from the text files. The object level data must be in the `WELL_DIR` and the file names *must match* the `r GLOB_W` `glob` pattern.

```{r}
#| label: read-well

well_tbl_partial <- dir_ls(path = WELL_DIR,
                           recurse = T,
                           glob = GLOB_W) |>
  read_tsv(id = "file_name",
           show_col_types = FALSE) |>
  select(
    plate_index = PlateName,
    well_index = WellName,
    row = Row,
    column = Column,
    cells_n = `Nuclei Final - Number of Objects`,
    nuc_area = `Nuclei Final - Nucleus Area [µm²] - Mean per Well`,
    nuc_round = `Nuclei Final - Nucleus Roundness - Mean per Well`,
    nuc_micronuclei_n = `Nuclei Final - Number of Micronuclei - Mean per Well`,
    spots_561_n = `Nuclei Final - Number of Spots 561 Good- per Cell 561  - Mean per Well`,
    spots_561_area = `Nuclei Final - Spot Area [px²]- Sum per Cell 561  - Mean per Well`,
    spots_561_int_mean = `Nuclei Final - Intensity Spots 561 Good BP600/37 Mean - Mean per Well`,
    spots_561_int_sum = `Nuclei Final - Intensity Spots 561 Good BP600/37 Sum - Mean per Well`
  )

paint(well_tbl_partial)
```

### Padding for missing edge wells

```{r}
horiz_pad <- well_tbl_partial |>
  group_by(plate_index) |>
  group_modify(
    ~ tibble(
      row = rep(c(1L, 16L), 24),
      column = rep(1:24, each = 2),
      well_index = paste0(LETTERS[row], column),
      cells_n = NA,
      nuc_area = NA,
      nuc_round = NA,
      nuc_micronuclei_n = NA,
      spots_561_n  = NA,
      spots_561_int_mean = NA,
      spots_561_int_sum = NA
    )
  ) |>
  ungroup()


paint(horiz_pad)
```

```{r}
vert_pad <- well_tbl_partial |>
  group_by(plate_index) |>
  group_modify(
    ~ tibble(
      row = rep(2:15, 2),
      column = rep(c(1, 24), each = 14),
      well_index = paste0(LETTERS[row], column),
      cells_n = NA,
      nuc_area = NA,
      nuc_round = NA,
      nuc_micronuclei_n = NA,
      spots_561_n  = NA,
      spots_561_int_mean = NA,
      spots_561_int_sum = NA
    )
  ) |>
  ungroup()

paint(vert_pad)
```

```{r}
well_tbl<- bind_rows(well_tbl_partial, vert_pad, horiz_pad) |>
  mutate(across(row:column, as.integer))

paint(well_tbl)
```

### Correct the sgDDX39A and sgBLM issue in HT001490 and HT001496.

We need to swap B23 with C23, D23 with E23, F23 with G23, H23 with I23, J23 with K23, L23 with M23, N23 with O23 in plates HT001490 and HT00496.This function was copied from this [Stack Overflow solution to a question](https://stackoverflow.com/questions/34096162/dplyr-mutate-replace-several-columns-on-a-subset-of-rows).

```{r}
mutate_cond <- function(.data, condition, ..., envir = parent.frame()) {
  condition <- eval(substitute(condition), .data, envir)
  .data[condition, ] <- .data[condition, ] |> mutate(...)
  .data
}
```


```{r}
well_tbl_flipped <- well_tbl |> 
  # This specifies that the modification needs to be applied only to rows B to N in column 23
  mutate_cond(plate_index %in% c("HT001490", "HT001496") & column == 23 & row %in% 2:15,
              # This flips even rows to odd rows numbers and viceversa:
              # B to C, C to B, D to E, E to D, etc.
              row = if_else(row %% 2 == 0, row + 1, row - 1)) |>
  mutate(well_index = paste0(LETTERS[row], column)) |>
  arrange(plate_index, row, column)

paint(well_tbl_flipped)
```


Cache the well level results (Both original and with column 23 rows flipped for HT001490 and HT001496) in the `r CACHE_DIR` directory.

```{r}
write_csv(well_tbl, file = file.path(CACHE_DIR, "nfish_epi_well_results_original.csv"))
write_csv(well_tbl_flipped, file = file.path(CACHE_DIR, "nfish_epi_well_results_flipped.csv"))
```

Create input and output folder hierarchies in the `r IN_DIR` and `r OUT_DIR` directories, respectively.

```{r}
well_tbl_flipped |>
  select(cells_n:spots_561_int_sum) |>
  names() |> walk(~ dir_create(file.path(IN_DIR, .x)))

well_tbl_flipped |>
  select(cells_n:spots_561_int_sum) |>
  names() |> walk(~ dir_create(file.path(OUT_DIR, .x)))
```

## `cellHTS2` data wrangling

### Annotation

Make the annotation file for `cellHTS2`, name it `Annotation.txt` and save it to the in the `r IN_DIR` directory.

```{r}
annotation_tbl <- layout_tbl |>
  group_by(plate, imaging_well, gene_symbol) |>
  group_keys() |>
  rename(
    Plate = plate,
    Well2 = imaging_well,
    GeneSymbol = gene_symbol
  ) |>
  mutate(Well = sprintf("%s%02d",
                        str_extract(Well2, "\\w"),
                        as.numeric(str_extract(Well2, "\\d+"))),
         GeneID = "N/A") |>
  arrange(Plate, Well)

paint(annotation_tbl)

write_tsv(annotation_tbl,
          file = file.path(METADATA_DIR, "Annotation.txt"))
```

### Plate Configuration

Generate the configuration file `Plateconf.txt` for `cellHTS2` according to the documentation specifications: The software expects this to be a rectangular table in a tabulator delimited text file, with mandatory columns Plate, Well, Content, plus two additional header lines that give the total number of wells and plates (see Table ?? for an example). The content of this file (except the two header lines) are stored in slot plateConf of x. As the name suggests, the Content column provides the content of each well in the plate (here referred to as the well annotation). Mainly, this annotation falls into four categories: empty wells, wells targeting genes of interest, control wells, and wells containing other things that do not fit in the previous categories. The first two types of wells should be indicated in the Content column of the plate configuration file by empty and sample, respectively, while the last type of wells should be indicated by other. The designation for the control wells in the Content column is more flexible. By default, the software expects them to be indicated by pos (for positive controls), or neg (for negative controls). However, other names are allowed, given that they are specified by the user whenever necessary (for example, when calling the writeReport function). This versatility for the control wells' annotation is justified by the fact that, sometimes, multiple positive and/or negative controls can be employed in a given screen, making it useful to give different names to the distinct controls in the Content column. More- over, this versatility might be required in multi-channel screens for which we frequently have reporter-specific controls. The Well column contains the name of each well of the plate in alphanu- meric format (in this case, A01 to P24), while column Plate gives the plate number (1, 2, ...). These two columns are also allowed to contain regular expressions. In the plate configuration file, each well and plate should be covered by a rule, and in case of multiple definitions only the last one is considered. For example, in the file shown in Table ??, the rule specified by the first line after the column header indicates that all of the wells in each of the 57 assay plate contain "sample". However, a following rule indicate that the content of wells A01, A02 and B01 and B02 differ from "sample", containing other material (in this case, "other" and controls). Note that the well annotations mentioned above are used by the software in the normalization, quality control, and gene selection calculations. Data from wells that are annotated as empty are ignored, i. e. they are set to NA.

The configuration file tells `cellHTS2` where the samples, controls and empty wells are on each plate. The first 8 lines of the file (Headers and controls positions) are hardcoded for now. The samples layout are is appended from the processed information obtained from the Janus logs.

```{r}
line1 <- "Wells: 384"
line2 <- "Plates: 4"
line3 <- "Plate\tWell\tContent"
line4 <- "*\t*\tempty"

odd_rows <- paste(LETTERS[seq(3, 15, by = 2)], collapse = ",")
even_rows <- paste(LETTERS[seq(2, 14, by = 2)], collapse = ",")

line5 <-
  paste0("*\t[", odd_rows, "]22\tkiller") # sgPLK1  in Column 23 odd rows (C, ..., O)
line6 <-
  paste0("*\t[", even_rows, "]22\tneg") #  sgScramble   in Column 23 even rows (B, D, ..., N)
line7 <-
  paste0("*\t[", odd_rows, "]23\tpos")  #  sgDDX39A in Column 24 odd rows (C, ..., O)
line8 <-
  paste0("*\t[", even_rows, "]23\tpos2") # sgBLM in Column 24 even rows (B, D, ..., N)

header <-  c(line1, line2, line3, line4, line5, line6, line7, line8)

header

# Write header to file
conf <- file(file.path(METADATA_DIR, "Plateconf.txt"), "w")
writeLines(header, conf)
close(conf)
```

The samples layout is appended from the processed information obtained from the annotation logs and is written out to the the `r METADATA_DIR` directory.

```{r makeConfigurationTable2}
config_tbl <- annotation_tbl |>
  select(Plate, Well) |>
  mutate(Content = "sample")

paint(config_tbl)
```

```{r}
write_tsv(config_tbl,
          file = file.path(METADATA_DIR, "Plateconf.txt"),
          append = T) # append 
```

### Measurements

Generate a `Master_Barcode_List.txt` file and save it in the working directory (i.e. the same directory where the .Rmd file is). According to the `cellHTS2` specifications, the file should have these columns: `PlateName` (The plate barcode, as determined in the Janus log files, a string), `Plate` (The plate number in the library, a number), `Replicate` (Self explanatory, a number) and `Batch` (if the experiment or replicate was run in different batches, not necessary). This file contains the information on which plates have been analyzed, and on what the internal organization of the run is. The `Master_Barcode_List.txt` file is used to generate the measurement files to be read by `cellHTS2`.

```{r}
barcodes_tbl <- read_tsv(file.path(METADATA_DIR, "Master_Barcode_List.txt"))

paint(barcodes_tbl)
```

### Plate List

Generate and write out the `cellHTS2` Platelist.txt file in the `r IN_DIR` directory. **Only analyze replicates 1 and 3, since replicate 2 failed for plates 3 and 4. Also, use flipped rows in column 23 for HT001490 and HT001496**.

```{r}
well_tbl_selected <- well_tbl_flipped |>
  # Only analyze replicates 1 and 3 
  filter(plate_index %in% c("HT001451", "HT001452", "HT001490", "HT001500",
                            "HT001457", "HT001458", "HT001496", "HT001502")) 
well_tbl_selected |>
  left_join(barcodes_tbl, by = c("plate_index" = "PlateName")) |>
  pivot_longer(cols = cells_n:spots_561_int_sum,
               names_to = "measurement",
               values_to = "value") |>
  group_by(Plate, Replicate, Batch, measurement, plate_index) |>
  group_keys() |>
  mutate(Filename = paste0(plate_index, "_cellHTS2.txt")) |>
  group_by(measurement) |>
  group_walk(~ write_tsv(
    select(.x, Filename, Plate, Replicate, Batch),
    file.path(IN_DIR,
              .y$measurement,
              "Platelist.txt")
  ))

dir_info(path = IN_DIR,
         glob = "*.txt",
         recurse = T) |> select(1:2)
```

Reformat the well names according to cellHTS2 specifications and write out one `cellHTS2` measurement files on a per measurement, per plate basis in the `r IN_DIR` directory.

```{r}
meas_tbl <- left_join(well_tbl_selected, 
                      barcodes_tbl, 
                      by = c("plate_index" = "PlateName")) |>
  mutate(well_index = sprintf("%s%02d",
                              str_extract(well_index, "\\w"),
                              as.numeric(str_extract(well_index, "\\d+"))))

meas_tbl |> pivot_longer(cols = cells_n:spots_561_int_sum,
                          values_to =  "Value",
                          names_to = "measurement") |>
             group_by(measurement, plate_index) |>
             group_walk( ~ write_tsv(
                select(.x, Plate, WellName = well_index, Value),
                file.path(IN_DIR,
                          .y$measurement,
                          paste0(.y$plate_index,
                                 "_cellHTS2.txt")),
                col_names = F,
                na = "NaN"
              ))

dir_info(path = IN_DIR,
         glob = "*_cellHTS2.txt",
         recurse = T) |> select(1:2)
```

Document the information about the analysis session

```{r}
sessionInfo()
```
